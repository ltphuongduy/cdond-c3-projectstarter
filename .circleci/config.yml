version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when:
        type: string
    steps:
      - run:
          name: Clear S3 and destroy environment
          when: << parameters.when >>
          command: |
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
            echo "done cleanup"

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Front-end audit
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Back-end audit
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install required dependencies
          command: yum install -y tar gzip unzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> .circleci/ansible/inventory
            cat .circleci/ansible/inventory

      - persist_to_workspace:
          root: .
          paths:
            - .circleci/ansible/inventory

      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          when: on_fail

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["95:18:ab:26:de:ef:25:cc:8b:62:f3:08:c2:01:33:b1"]
      # attach workspace
      - attach_workspace:
          at: .
      - run:
          name: Install required dependencies
          command: |
            apk add tar unzip curl
            apk add --no-cache aws-cli
            aws --version
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
      - run:
          name: Configure server
          command: |
            cd ./.circleci/ansible/
            ansible-playbook -i inventory configure-server.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          when: on_fail

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install AWS CLI dependencies
          command: |
            mkdir temp
            cd ./temp
            apt-get update && apt-get install -yy less
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            cd ..
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            touch temp
            npm run migrations > temp
            cat temp
      - run:
          name: Send migration results to kvdb.io
          command: |
            cd backend
            ls
            cat temp
            if grep -q "No migrations are pending" temp
            then
              echo "stash success status to kvdb.io"
              echo "https://kvdb.io/J8eDbBk9s6sskLtb1ymQc7/migration_${CIRCLE_WORKFLOW_ID:0:7}"
              curl -k -d '1' https://kvdb.io/J8eDbBk9s6sskLtb1ymQc7/migration_${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "stash fail status to kvdb.io"
              echo "https://kvdb.io/J8eDbBk9s6sskLtb1ymQc7/migration_${CIRCLE_WORKFLOW_ID:0:7}"
              curl -k -d '0' https://kvdb.io/J8eDbBk9s6sskLtb1ymQc7/migration_${CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment:
          when: on_fail

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]